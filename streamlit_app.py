import streamlit as st
import sqlite3
import pandas as pd
from groq import Groq

# Set Streamlit page config
st.set_page_config(page_title="AI SQL Assistant", layout="wide")

# Function to analyze the database and extract schema information
def analyze_db(uploaded_file):
    conn = sqlite3.connect(uploaded_file)
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()

    schema_info = {}
    for table_name in tables:
        table_name = table_name[0]
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        schema_info[table_name] = [col[1] for col in columns]

    conn.close()
    return schema_info

# Function to convert schema info to natural language for RAG context
def generate_schema_context(schema_info):
    context = ""
    for table, columns in schema_info.items():
        context += f"Table '{table}' has columns: {', '.join(columns)}.\n"
    return context

# Function to execute a SQL query and return the result
def execute_query(uploaded_file, query):
    conn = sqlite3.connect(uploaded_file)
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

# Load the Groq API key from Streamlit secrets
groq_api_key = st.secrets["GROQ_API_KEY"]
client = Groq(api_key=groq_api_key)

# Streamlit App
st.title("ðŸ“Š AI SQL Assistant for Your SQLite DB")

# File uploader for .db file
uploaded_file = st.file_uploader("Upload your SQLite .db file", type=["db"])

if uploaded_file:
    st.success("Database uploaded successfully!")

    # Step 1: Show the database schema
    schema_info = analyze_db(uploaded_file)
    st.subheader("Detected Database Schema")
    with st.expander("Click to view schema"):
        with st.container():
            st.markdown("<div style='max-height: 300px; overflow-y: scroll;'>", unsafe_allow_html=True)
            for table, columns in schema_info.items():
                st.markdown(f"**{table}**: {', '.join(columns)}")
            st.markdown("</div>", unsafe_allow_html=True)

    # Step 2: Generate SQL from natural language query and provide insight
    schema_context = generate_schema_context(schema_info)

    # Add more RAG examples from your original code
    rag_examples = """
    Example 1:
    User: Show me the total revenue generated by each category.
    SQL: SELECT c.name AS category, SUM(p.amount) AS total_revenue FROM payments p JOIN products pr ON p.product_id = pr.id JOIN categories c ON pr.category_id = c.id GROUP BY c.name;

    Example 2:
    User: Which employees have not made any sales?
    SQL: SELECT e.name FROM employees e LEFT JOIN sales s ON e.id = s.employee_id WHERE s.id IS NULL;

    Example 3:
    User: Show the top 5 customers by total purchase amount.
    SQL: SELECT c.name, SUM(o.amount) as total_spent FROM orders o JOIN customers c ON o.customer_id = c.id GROUP BY c.name ORDER BY total_spent DESC LIMIT 5;

    Example 4:
    User: What are the average ratings for each product?
    SQL: SELECT p.name, AVG(r.rating) FROM products p JOIN reviews r ON p.id = r.product_id GROUP BY p.name;
    """

    while True:
        st.subheader("Ask a question about your data")
        user_question = st.text_input("Enter your question")

        if user_question:
            with st.spinner("Generating SQL query and insight..."):
                prompt = f"""
You are a SQL expert. Given the following database schema and examples, generate a valid SQLite SQL query for the user's question.

Database Schema:
{schema_context}

Previous Examples:
{rag_examples}

User Question: {user_question}
SQL:
"""
                
                response = client.chat.completions.create(
                    model="mixtral-8x7b-32768",
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                sql_query = response.choices[0].message.content.strip()

                st.code(sql_query, language="sql")

                try:
                    result_df = execute_query(uploaded_file, sql_query)
                    st.success("Query executed successfully. Here are the results:")
                    st.dataframe(result_df)
                except Exception as e:
                    st.error(f"Error executing query: {e}")

            # Ask user if they want to continue
            continue_prompt = st.radio("Would you like to ask another question?", ("Yes", "No"), index=0)
            if continue_prompt == "No":
                st.info("Thank you for using the AI SQL Assistant!")
                break
